lon_3 <- 0.1275
#lat and lon for melbourne
lat_4<- -37.8136
lon_4<- 144.9631
########################### repeat the code chunks here for each pair of coordinates ###########
#again, lon_1 and lat_1 are longitude and latitude for fairbanks.
#you could make inter4, inter5....
#first great circle route- fairbanks to dc
inter1 <- rbind(c(lon_1,lat_1),c(lon_2,lat_2))
lines.centered(inter1,center= -147,col='red') #change the color to whatever you want here.
#second great circle route- fairbanks to london
inter2 <- rbind(c(lon_1, lat_1), c(lon_3, lat_3))
lines.centered(inter2,center= -147,col='red') #change the color to whatever you want here.
#third
inter3 <- rbind(c(lon_1, lat_1), c(lon_4, lat_4))
lines.centered(inter3,center = -147,col='red') #change the color to whatever you want here.
#repeat those two lines, but change the coordinate numbers to add more lines to your map
library(maps)
#extra function to allow for plotting of map not centered on prime meridian
plot.map<- function(database,center,...){
Obj <- map(database,...,plot=F)
coord <- cbind(Obj[[1]],Obj[[2]])
# split up the coordinates
id <- rle(!is.na(coord[,1]))
id <- matrix(c(1,cumsum(id$lengths)),ncol=2,byrow=T)
polygons <- apply(id,1,function(i){coord[i[1]:i[2],]})
# split up polygons that differ too much
polygons <- lapply(polygons,function(x){
x[,1] <- x[,1] - center
x[,1] <- ifelse(x[,1]>180,x[,1]-360,x[,1])
if(sum(diff(x[,1])>300,na.rm=T) >0){
id <- x[,1] < 0
x <- rbind(x[id,],c(NA,NA),x[!id,])
}
x
})
# reconstruct the object
polygons <- do.call(rbind,polygons)
Obj[[1]] <- polygons[,1]
Obj[[2]] <- polygons[,2]
map(Obj,...)
}
lines.centered<-function(coords,center,col='black') #other function to plot great circle routes centered on fairbanks.
{
if(center<0)
{
coords[,1]<-coords[,1]-center
coords[,1]<-ifelse(coords[,1]>180,coords[,1]-360,coords[,1])
} else {
coords[,1]<-coords[,1]+center
coords[,1]<-ifelse(coords[,1]< -180,coords[,1]+360,coords[,1])
}
lines(coords,col=col)
}
#to see a list of available colors:
colors()
#plot the background world map
center<- -147 #(longitude for map center)
############################ Plotting the map ###################################################3
plot.map("world", center= -147, ylim=c(-60,90),col="lightgray", fill=TRUE,bg="white", lwd=0.1,mar=c(0,0,0,0)) #change the world map colors here
############################ add latitudes and longitudes here ##################################
#lat and lon for fairbanks
lat_1 <- 64.8436
lon_1 <- -147.7231
#lat and lon for Washington DC
lat_2 <- 38.8951
lon_2 <- -77.0367
#lat and lon for London
lat_3 <- 51.5072
lon_3 <- 0.1275
#lat and lon for melbourne
lat_4<- -37.8136
lon_4<- 144.9631
########################### repeat the code chunks here for each pair of coordinates ###########
#again, lon_1 and lat_1 are longitude and latitude for fairbanks.
#you could make inter4, inter5....
#first great circle route- fairbanks to dc
inter1 <- rbind(c(lon_1,lat_1),c(lon_2,lat_2))
lines.centered(inter1,center= -147,col='red') #change the color to whatever you want here.
#second great circle route- fairbanks to london
inter2 <- rbind(c(lon_1, lat_1), c(lon_3, lat_3))
lines.centered(inter2,center= -147,col='red') #change the color to whatever you want here.
#third
inter3 <- rbind(c(lon_1, lat_1), c(lon_4, lat_4))
lines.centered(inter3,center = -147,col='red') #change the color to whatever you want here.
#repeat those two lines, but change the coordinate numbers to add more lines to your map
?rle
library(maps)
#extra function to allow for plotting of map not centered on prime meridian
plot.map<- function(database,center,...){
Obj <- map(database,...,plot=F)
coord <- cbind(Obj[[1]],Obj[[2]])
# split up the coordinates
id <- rle(!is.na(coord[,1]))
id <- matrix(c(1,cumsum(id$lengths)),ncol=2,byrow=T)
polygons <- apply(id,1,function(i){coord[i[1]:i[2],]})
# split up polygons that differ too much
polygons <- lapply(polygons,function(x){
x[,1] <- x[,1] - center
x[,1] <- ifelse(x[,1]>180,x[,1]-360,x[,1])
if(sum(diff(x[,1])>300,na.rm=T) >0){
id <- x[,1] < 0
x <- rbind(x[id,],c(NA,NA),x[!id,])
}
x
})
# reconstruct the object
polygons <- do.call(rbind,polygons)
Obj[[1]] <- polygons[,1]
Obj[[2]] <- polygons[,2]
map(Obj,...)
}
lines.centered<-function(coords,center,col='black') #other function to plot great circle routes centered on fairbanks.
{
if(center<0)
{
coords[,1]<-coords[,1]-center
coords[,1]<-ifelse(coords[,1]>180,coords[,1]-360,coords[,1])
} else {
coords[,1]<-coords[,1]+center
coords[,1]<-ifelse(coords[,1]< -180,coords[,1]+360,coords[,1])
}
lines(coords,col=col)
}
#to see a list of available colors:
colors()
#plot the background world map
center<- -147 #(longitude for map center)
############################ Plotting the map ###################################################3
plot.map("world", center= -147, ylim=c(-60,90),col="lightgray", fill=TRUE,bg="white", lwd=0.1,mar=c(0,0,0,0)) #change the world map colors here
############################ add latitudes and longitudes here ##################################
#lat and lon for fairbanks
lat_1 <- 64.8436
lon_1 <- -147.7231
#lat and lon for Washington DC
lat_2 <- 38.8951
lon_2 <- -77.0367
#lat and lon for London
lat_3 <- 51.5072
lon_3 <- 0.1275
#lat and lon for melbourne
lat_4<- -37.8136
lon_4<- 144.9631
########################### repeat the code chunks here for each pair of coordinates ###########
#again, lon_1 and lat_1 are longitude and latitude for fairbanks.
#you could make inter4, inter5....
#first great circle route- fairbanks to dc
inter1 <- rbind(c(lon_1,lat_1),c(lon_2,lat_2))
lines.centered(inter1,center= -147,col='red') #change the color to whatever you want here.
#second great circle route- fairbanks to london
inter2 <- rbind(c(lon_1, lat_1), c(lon_3, lat_3))
lines.centered(inter2,center= -147,col='red') #change the color to whatever you want here.
#third
inter3 <- rbind(c(lon_1, lat_1), c(lon_4, lat_4))
lines.centered(inter3,center = -147,col='red') #change the color to whatever you want here.
#repeat those two lines, but change the coordinate numbers to add more lines to your map
points(rbind(c(lon_2,lat_2),c(lon_3,lat_3),c(lon_4,lat_4)))
?boxplot.stats
snap<-read.csv('snapclim.csv')
setwd('~/Dropbox/temcal/')
snap<-read.csv('snapclim.csv')
names(snap)
head(snap)
snap<-read.csv('snapclim.csv')[,-1]
?order
?sort
varname='pr'
lakename='1_63_5'
snap.sub<-subset(snap,snap$LakeID==lakename & snap$Variable == varname)
snap.sub
snap.sort<-sort(snap.sub,partial=c(5,4))
?order
snap.sort<-snap.sub[with(snap.sub,order(Year,Month)),]
snap.sort
head(snap.sort,24)
var.string<-function(varname,lakename)
{
snap.sub<-subset(snap,snap$LakeID==lakename & snap$Variable == varname)
snap.sort<-snap.sub[with(snap.sub,order(Year,Month)),]
vals<-snap.sort$Value
val.str<-paste(vals,collapse=',')
cat(val.str)
}
var.string('pr','1_63_5')
table(snap$Variable)
var.string('rsds','1_63_5')
var.string('pr','1_63_5')
?readClipboard
var.string('pr','1_63_5')
var.string('tas','1_63_5')
source('~/Dropbox/temcal/snap_ncstring_extract.r', echo=TRUE)
var.string('vap','1_63_5')
table(snap$Variable,snap$Value)
names(snap)
table(snap$Variable,snap$LAkeID)
table(snap$Variable,snap$La\keID)
table(snap$Variable,snap$LakeID)
1308/12
2009-1901
rm(list=ls())
#first run = poorly drained drainage type 0
outdir<-'~/Desktop/pest/allparallpftlog/'
setwd('/tmp/year-cal-dvmdostem/')
library(rjson)
avg.years=10
jsons=dir(pattern='json')
num.files=length(jsons)
last.jsons=jsons[(num.files-avg.years):num.files]
i=10
cmtbgc<-fromJSON(file=last.jsons[i])
#soil pools
carbondeep<-cmtbgc$CarbonDeep
carbonshlw<-cmtbgc$CarbonShallow
carbonmin<-cmtbgc$CarbonMineralSum
organicn<-cmtbgc$OrganicNitrogenSum
availn<-cmtbgc$AvailableNitrogenSum
soil.vals<-c(carbondeep,carbonshlw,carbonmin,organicn,availn)
cmtbgc
cmtbgc<-fromJSON(file=last.jsons[i])
#first run = poorly drained drainage type 0
outdir<-'~/Desktop/pest/allparallpftlog/'
setwd('/tmp/year-cal-dvmdostem/')
library(rjson)
avg.years=10
jsons=dir(pattern='json')
num.files=length(jsons)
last.jsons=jsons[(num.files-avg.years):num.files]
i=10
cmtbgc<-fromJSON(file=last.jsons[i])
#soil pools
carbondeep<-cmtbgc$CarbonDeep
carbonshlw<-cmtbgc$CarbonShallow
carbonmin<-cmtbgc$CarbonMineralSum
organicn<-cmtbgc$OrganicNitrogenSum
availn<-cmtbgc$AvailableNitrogenSum
soil.vals<-c(carbondeep,carbonshlw,carbonmin,organicn,availn)
#pftspecific
pft.nums<-3
pft.ids<-paste('PFT',pft.nums,sep='')
num.pfts=length(pft.ids)
soil.vars<-c('CarbonDeep','CarbonShallow','CarbonMineralSum','OrganicNitrogenSum','AvailableNitrogenSum')
pft.vars<-c('GPPAll','NPPAll','VEGCL','VEGCW','VEGCR','VEGCSUM','VEGNL','VEGNW','VEGNR','VEGNSUM','VEGLBLN')
pft.vals.mat<-array(0,length(pft.vars),num.pfts)
for(j in 1:length(num.pfts))
{
pft=pft.ids[j]
pft.dat<-cmtbgc[[pft]]
gppall<-pft.dat$GPPAll
nppall<-pft.dat$NPPAll
vegc.l<-pft.dat$VegCarbon$Leaf
vegc.w<-pft.dat$VegCarbon$Stem
vegc.r<-pft.dat$VegCarbon$Root
vegc.sum<-vegc.l+vegc.w+vegc.r
veg.strn.l<-pft.dat$VegStructuralNitrogen$Leaf
veg.strn.w<-pft.dat$VegStructuralNitrogen$Stem
veg.strn.r<-pft.dat$VegStructuralNitrogen$Root
veg.strn.sum<-veg.strn.l+veg.strn.w+veg.strn.r
veg.lbln<-pft.dat$VegLabileNitrogen
pft.vals<-c(gppall,nppall,vegc.l,vegc.w,vegc.r,vegc.sum,veg.strn.l,veg.strn.w,veg.strn.r,veg.strn.sum,veg.lbln)
if(length(dim(pft.vals.mat))>1){
pft.vals.mat[,j]=pft.vals} else {
pft.vals.mat=pft.vals}
}
pft.vars.rep<-rep(pft.vars,num.pfts)
vars<-c(soil.vars,pft.vars.rep)
pft.for.df<-c(rep("",length(soil.vars)),rep(pft.nums,each=length(pft.vars)))
vars.numd=paste(vars,pft.for.df,sep='')
pft.vals.vec<-c(pft.vals.mat)
vals<-c(soil.vals,pft.vals.vec)
obs.vals<-data.frame(Variable=vars.numd,Value=vals)
head(obs.vals)
obs.vals
#first run = poorly drained drainage type 0
outdir<-'~/Desktop/pest/allparallpftlog/'
setwd('/tmp/year-cal-dvmdostem/')
library(rjson)
avg.years=10
jsons=dir(pattern='json')
num.files=length(jsons)
last.jsons=jsons[(num.files-avg.years):num.files]
i=10
cmtbgc<-fromJSON(file=last.jsons[i])
#soil pools
carbondeep<-cmtbgc$CarbonDeep
carbonshlw<-cmtbgc$CarbonShallow
carbonmin<-cmtbgc$CarbonMineralSum
organicn<-cmtbgc$OrganicNitrogenSum
availn<-cmtbgc$AvailableNitrogenSum
soil.vals<-c(carbondeep,carbonshlw,carbonmin,organicn,availn)
#pftspecific
pft.nums<-3:6
pft.ids<-paste('PFT',pft.nums,sep='')
num.pfts=length(pft.ids)
soil.vars<-c('CarbonDeep','CarbonShallow','CarbonMineralSum','OrganicNitrogenSum','AvailableNitrogenSum')
pft.vars<-c('GPPAll','NPPAll','VEGCL','VEGCW','VEGCR','VEGCSUM','VEGNL','VEGNW','VEGNR','VEGNSUM','VEGLBLN')
pft.vals.mat<-array(0,length(pft.vars),num.pfts)
for(j in 1:length(num.pfts))
{
pft=pft.ids[j]
pft.dat<-cmtbgc[[pft]]
gppall<-pft.dat$GPPAll
nppall<-pft.dat$NPPAll
vegc.l<-pft.dat$VegCarbon$Leaf
vegc.w<-pft.dat$VegCarbon$Stem
vegc.r<-pft.dat$VegCarbon$Root
vegc.sum<-vegc.l+vegc.w+vegc.r
veg.strn.l<-pft.dat$VegStructuralNitrogen$Leaf
veg.strn.w<-pft.dat$VegStructuralNitrogen$Stem
veg.strn.r<-pft.dat$VegStructuralNitrogen$Root
veg.strn.sum<-veg.strn.l+veg.strn.w+veg.strn.r
veg.lbln<-pft.dat$VegLabileNitrogen
pft.vals<-c(gppall,nppall,vegc.l,vegc.w,vegc.r,vegc.sum,veg.strn.l,veg.strn.w,veg.strn.r,veg.strn.sum,veg.lbln)
if(length(dim(pft.vals.mat))>1){
pft.vals.mat[,j]=pft.vals} else {
pft.vals.mat=pft.vals}
}
pft.vars.rep<-rep(pft.vars,num.pfts)
vars<-c(soil.vars,pft.vars.rep)
pft.for.df<-c(rep("",length(soil.vars)),rep(pft.nums,each=length(pft.vars)))
vars.numd=paste(vars,pft.for.df,sep='')
pft.vals.vec<-c(pft.vals.mat)
vals<-c(soil.vals,pft.vals.vec)
obs.vals<-data.frame(Variable=vars.numd,Value=vals)
setwd(outdir)
write.table(obs.vals,'TEM_Pest_Output.txt',row.names=FALSE,quote=FALSE,sep=',')
obs.vals
rm(list=ls())
#quick and dirty plotting code for looking at drainage effects on soil moisture
#first run = poorly drained drainage type 0
outdir<-'~/Desktop/pest/allparallpftlog/'
setwd('/tmp/year-cal-dvmdostem/')
library(rjson)
avg.years=10
jsons=dir(pattern='json')
num.files=length(jsons)
last.jsons=jsons[(num.files-avg.years):num.files]
i=10
cmtbgc<-fromJSON(file=last.jsons[i])
#soil pools
carbondeep<-cmtbgc$CarbonDeep
carbonshlw<-cmtbgc$CarbonShallow
carbonmin<-cmtbgc$CarbonMineralSum
organicn<-cmtbgc$OrganicNitrogenSum
availn<-cmtbgc$AvailableNitrogenSum
soil.vals<-c(carbondeep,carbonshlw,carbonmin,organicn,availn)
#pftspecific
pft.nums<-3:6
pft.ids<-paste('PFT',pft.nums,sep='')
num.pfts=length(pft.ids)
soil.vars<-c('CarbonDeep','CarbonShallow','CarbonMineralSum','OrganicNitrogenSum','AvailableNitrogenSum')
pft.vars<-c('GPPAll','NPPAll','VEGCL','VEGCW','VEGCR','VEGCSUM','VEGNL','VEGNW','VEGNR','VEGNSUM','VEGLBLN')
pft.vals.mat<-array(0,length(pft.vars),num.pfts)
for(j in 1:length(num.pfts))
{
pft=pft.ids[j]
pft.dat<-cmtbgc[[pft]]
gppall<-pft.dat$GPPAll
nppall<-pft.dat$NPPAll
vegc.l<-pft.dat$VegCarbon$Leaf
vegc.w<-pft.dat$VegCarbon$Stem
vegc.r<-pft.dat$VegCarbon$Root
vegc.sum<-vegc.l+vegc.w+vegc.r
veg.strn.l<-pft.dat$VegStructuralNitrogen$Leaf
veg.strn.w<-pft.dat$VegStructuralNitrogen$Stem
veg.strn.r<-pft.dat$VegStructuralNitrogen$Root
veg.strn.sum<-veg.strn.l+veg.strn.w+veg.strn.r
veg.lbln<-pft.dat$VegLabileNitrogen
pft.vals<-c(gppall,nppall,vegc.l,vegc.w,vegc.r,vegc.sum,veg.strn.l,veg.strn.w,veg.strn.r,veg.strn.sum,veg.lbln)
if(length(dim(pft.vals.mat))>1){
pft.vals.mat[,j]=pft.vals} else {
pft.vals.mat=pft.vals}
}
pft.vars.rep<-rep(pft.vars,num.pfts)
vars<-c(soil.vars,pft.vars.rep)
pft.for.df<-c(rep("",length(soil.vars)),rep(pft.nums,each=length(pft.vars)))
vars.numd=paste(vars,pft.for.df,sep='')
pft.vals.vec<-c(pft.vals.mat)
vals<-c(soil.vals,pft.vals.vec)
vals
length(vals)
length(pft.vals)
pft.ids
num.pfts
dim(pft.vals.mat)
pft.vals.mat<-matrix(0,length(pft.vars),num.pfts)
pft.vals.mat<-matrix(0,length(pft.vars),num.pfts)
for(j in 1:length(num.pfts))
{
pft=pft.ids[j]
pft.dat<-cmtbgc[[pft]]
gppall<-pft.dat$GPPAll
nppall<-pft.dat$NPPAll
vegc.l<-pft.dat$VegCarbon$Leaf
vegc.w<-pft.dat$VegCarbon$Stem
vegc.r<-pft.dat$VegCarbon$Root
vegc.sum<-vegc.l+vegc.w+vegc.r
veg.strn.l<-pft.dat$VegStructuralNitrogen$Leaf
veg.strn.w<-pft.dat$VegStructuralNitrogen$Stem
veg.strn.r<-pft.dat$VegStructuralNitrogen$Root
veg.strn.sum<-veg.strn.l+veg.strn.w+veg.strn.r
veg.lbln<-pft.dat$VegLabileNitrogen
pft.vals<-c(gppall,nppall,vegc.l,vegc.w,vegc.r,vegc.sum,veg.strn.l,veg.strn.w,veg.strn.r,veg.strn.sum,veg.lbln)
if(length(dim(pft.vals.mat))>1){
pft.vals.mat[,j]=pft.vals} else {
pft.vals.mat=pft.vals}
}
pft.vals.mat
pft.vars.rep<-rep(pft.vars,num.pfts)
vars<-c(soil.vars,pft.vars.rep)
pft.for.df<-c(rep("",length(soil.vars)),rep(pft.nums,each=length(pft.vars)))
vars.numd=paste(vars,pft.for.df,sep='')
pft.vals.vec<-c(pft.vals.mat)
vals<-c(soil.vals,pft.vals.vec)
obs.vals<-data.frame(Variable=vars.numd,Value=vals)
obs.vals
obs.vals$Value<-ifelse(obs.vals$Value>0,log(obs.vals$Value),obs.vals$Value)
obs.vals$Value
soil.vars<-c('CarbonDeep','CarbonShallow','CarbonMinSum',
'OrganicNSum','AvailableNSum')
vars<-c('GPPALL','NPPALL','VEGCL','VEGCW','VEGCR','VEGCSUM',
'VEGNL','VEGNW','VEGNR','VEGNSUM','VEGLBLN')
pft.nums<-3:6
pft.ids=paste('l1 @,@ !',sep='')
pft.ids.rep<-rep(pft.ids,each=length(vars))
p.num.rep=rep(pft.nums,each=length(vars))
vars.rep=rep(vars,length(pft.ids))
vars.rep=paste(vars.rep,p.num.rep,"!",sep='')
lines<-paste(pft.ids.rep,vars.rep,sep='')
soil.lines<-paste("l2 @,@ !",soil.vars[1],"!",sep="")
soil.lines<-c(soil.lines,paste("l1 @,@ !",soil.vars[2:length(soil.vars)],"!",sep=""))
firstline="pif @"
file=cbind(c(firstline,soil.lines,lines))
print(file)
outdir='~/Desktop/pest/allparallpftlog/'
setwd(outdir)
write.table(file,"tem.pif",row.names=FALSE,col.names=FALSE,quote=FALSE)
outdir='~/Desktop/pest/allparallpftlog/'
setwd(outdir)
soil.vars<-c('CarbonDeep','CarbonShallow','CarbonMinSum',
'OrganicNSum','AvailableNSum')
vars<-c('GPPALL','NPPALL','VEGCL','VEGCW','VEGCR','VEGCSUM',
'VEGNL','VEGNW','VEGNR','VEGNSUM','VEGLBLN')
pft.nums<-3:6
pft.ids=paste('l1 @,@ !',sep='')
pft.ids.rep<-rep(pft.ids,each=length(vars))
p.num.rep=rep(pft.nums,each=length(vars))
vars.rep=rep(vars,length(pft.ids))
vars.rep=paste(vars.rep,p.num.rep,"!",sep='')
lines<-paste(pft.ids.rep,vars.rep,sep='')
soil.lines<-paste("l2 @,@ !",soil.vars[1],"!",sep="")
soil.lines<-c(soil.lines,paste("l1 @,@ !",soil.vars[2:length(soil.vars)],"!",sep=""))
firstline="pif @"
file=cbind(c(firstline,soil.lines,lines))
print(file)
write.table(file,"tem.ins",row.names=FALSE,col.names=FALSE,quote=FALSE)
#quick and dirty plotting code for looking at drainage effects on soil moisture
#first run = poorly drained drainage type 0
outdir<-'~/Desktop/pest/allparallpftlog/'
setwd('/tmp/year-cal-dvmdostem/')
library(rjson)
avg.years=10
jsons=dir(pattern='json')
num.files=length(jsons)
last.jsons=jsons[(num.files-avg.years):num.files]
i=10
cmtbgc<-fromJSON(file=last.jsons[i])
#soil pools
carbondeep<-cmtbgc$CarbonDeep
carbonshlw<-cmtbgc$CarbonShallow
carbonmin<-cmtbgc$CarbonMineralSum
organicn<-cmtbgc$OrganicNitrogenSum
availn<-cmtbgc$AvailableNitrogenSum
soil.vals<-c(carbondeep,carbonshlw,carbonmin,organicn,availn)
#pftspecific
pft.nums<-3:6
pft.ids<-paste('PFT',pft.nums,sep='')
num.pfts=length(pft.ids)
soil.vars<-c('CarbonDeep','CarbonShallow','CarbonMineralSum','OrganicNitrogenSum','AvailableNitrogenSum')
pft.vars<-c('GPPAll','NPPAll','VEGCL','VEGCW','VEGCR','VEGCSUM','VEGNL','VEGNW','VEGNR','VEGNSUM','VEGLBLN')
pft.vals.mat<-matrix(0,length(pft.vars),num.pfts)
for(j in 1:length(num.pfts))
{
pft=pft.ids[j]
pft.dat<-cmtbgc[[pft]]
gppall<-pft.dat$GPPAll
nppall<-pft.dat$NPPAll
vegc.l<-pft.dat$VegCarbon$Leaf
vegc.w<-pft.dat$VegCarbon$Stem
vegc.r<-pft.dat$VegCarbon$Root
vegc.sum<-vegc.l+vegc.w+vegc.r
veg.strn.l<-pft.dat$VegStructuralNitrogen$Leaf
veg.strn.w<-pft.dat$VegStructuralNitrogen$Stem
veg.strn.r<-pft.dat$VegStructuralNitrogen$Root
veg.strn.sum<-veg.strn.l+veg.strn.w+veg.strn.r
veg.lbln<-pft.dat$VegLabileNitrogen
pft.vals<-c(gppall,nppall,vegc.l,vegc.w,vegc.r,vegc.sum,veg.strn.l,veg.strn.w,veg.strn.r,veg.strn.sum,veg.lbln)
if(length(dim(pft.vals.mat))>1){
pft.vals.mat[,j]=pft.vals} else {
pft.vals.mat=pft.vals}
}
pft.vars.rep<-rep(pft.vars,num.pfts)
vars<-c(soil.vars,pft.vars.rep)
pft.for.df<-c(rep("",length(soil.vars)),rep(pft.nums,each=length(pft.vars)))
vars.numd=paste(vars,pft.for.df,sep='')
pft.vals.vec<-c(pft.vals.mat)
vals<-c(soil.vals,pft.vals.vec)
obs.vals<-data.frame(Variable=vars.numd,Value=vals)
#log
obs.vals$Value<-ifelse(obs.vals$Value>0,log(obs.vals$Value),obs.vals$Value)
setwd(outdir)
write.table(obs.vals,'TEM_Pest_Output.txt',row.names=FALSE,quote=FALSE,sep=',')
source('~/Desktop/pest/allparallpftlog/pest_processing_allpft_logtrans.r', echo=TRUE)
